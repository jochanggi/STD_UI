/*-------------------------------------------------------------------
    정규식 팁 - 문자열을 변환하여 변수를 생성한다.
-------------------------------------------------------------------*/
1. 스타일 값을 클래스명으로 변수만들기
    찾을 말:([.])(.*) ([{])(.*)([:])(.*)([}])
    바꿀 말:\1\2\3\4\5\$\2\7
2. 클래스명을 변수로 변환하기
    찾을 말:([.])(.*)([{])(.*)([}])
    바꿀 말:\$\2\:\4


/*-------------------------------------------------------------------
    선택자문법 - 하위구조를 계층화한다.
-------------------------------------------------------------------*/
/* 자손구조 */
.tabs {
	ul {
		li {
			a {
				font-size: $font-size;
			}
		}
	}
}
/* 자식구조 */
.tabs {
	> ul {
		> li {
		 	> a {
				font-size: $font-size;
			}
		}
	}
}

/* & 선택자 (가상 선택자, 가상 엘리먼트, 다중클래스) 부조까지의 선택자 자체를 참조한다. */
.btn {
	/* 버튼 공통 기본 속성 정의 */
	display: inline-block;
	border:1px solid;
	text-align: center;
	text-decoration: none;
	> span {
		display: inline-block;
		position: relative;
	}

	/* 버튼 사이즈별 정의 (.클래스를 붙이지 않고 이용할 경우 부모의 클래스에 그대로 덧붙여져서 변환된다. .btn-sm, .btn.md...) */
	/* .을 붙일경우는 .btn.sm, .btn.md 이런식으로 변환된다. */
	&-sm {
		padding: 0 15px;
		font-size: 12px;
		line-height: 24px;
	}
	&-md {
		padding: 0 20px;
		font-size: 14px;
		line-height: 30px;
	}
	&-lg {
		padding: 0 25px;
		font-size: 16px;
		line-height:36px;
	}

	/* 버튼 칼라별 정의 */
	&-color1 {
		color: $primary-color;
		border-color: $primary-color;
		background-color: #fff;
		&:hover,
		&:active {
			color: #fff;
			border-color: #fff;
			background-color: $primary-color;
		}
	}
	&-color2 {
		color: $secondary-color;
		border-color: $secondary-color;
		background-color: #fff;
		&:hover,
		&:active {
			color: #fff;
			border-color: #fff;
			background-color: $secondary-color;
		}
	}
	&-color3 {
		color: $third-color;
		border-color: $third-color;
		background-color: #fff;
		&:hover,
		&:active {
			color: #fff;
			border-color: #fff;
			background-color: $third-color;
		}
	}
	/* 버튼 백그라운드 칼라별 정의 */
	&-bg1 {
		color: #fff;
		border-color: $primary-color;
		background-color: $primary-color;
		&:hover,
		&:active {
			color: $third-color;
			border-color: $third-color;
			background-color: #fff;
		}
	}
	&-bg2 {
		color: #fff;
		border-color: $secondary-color;
		background-color: $secondary-color;
		&:hover,
		&:active {
			color: $secondary-color;
			border-color: $secondary-color;
			background-color: #fff;
		}
	}
	&-bg3 {
		color: #fff;
		border-color: $third-color;
		background-color: $third-color;
		&:hover,
		&:active {
			color: $third-color;
			border-color: $third-color;
			background-color: #fff;
		}
	}
	/* 버튼 라운드 */
	&-round {
		border-radius: $basic-radius;
	}
	&.another {
		background-color: #ff6600;
	}
}


/*-------------------------------------------------------------------
    Variables - 변수에 값을 정의한다.
-------------------------------------------------------------------*/
/* 예시1 */
$color-gray:gray;
.selecter {color:$color-gray}


/*-------------------------------------------------------------------
    @extend - 지정한 선택자를 상속받는다.
-------------------------------------------------------------------*/
/* 예시 1 */
.box {
	padding: 50px;
	border: 1px solid #333;
	text-align: center;
}
.news-box {
	@extend .box;
	background-color: #666;
}
.list-box {
	@extend .box;
	background-color: #999;
}


/* 예시 2 (% 플레이스홀더는 직접 클래스를 변환하지 않고 상속만 받아서 사용할 수 있게 한다.) */
%box2 {
	padding: 100px;
	border: 2px solid #ff6600;
	text-align: center;
}
.news-box2 {
	@extend %box2;
	background-color: #666;
}
.list-box2 {
	@extend %box2;
	background-color: #999;
}


/*-------------------------------------------------------------------
    @mixin - Mixin에서 정의한 내용이 그대로 출력됩니다.
-------------------------------------------------------------------*/
/* 예시 1 */
@mixin mixin-name1($value1, $value2, ...) {
	p {border-radius: $value;}
}
@include mixin-name(value1, value2, ... );


/* 예시 2 */
@mixin mixin-name2($value1, $value2, ...) {
	border-radius: $value;
}
p {@include mixin-name(value1, value2, ... );}
